
// Generated from .\BSLLexer.g4 by ANTLR 4.12.0

#pragma once


#include "antlr4-runtime.h"




class  BSLLexer : public antlr4::Lexer {
public:
  enum {
    LINE_COMMENT = 1, WHITE_SPACE = 2, DOT = 3, LBRACK = 4, RBRACK = 5, 
    LPAREN = 6, RPAREN = 7, COLON = 8, SEMICOLON = 9, COMMA = 10, ASSIGN = 11, 
    PLUS = 12, MINUS = 13, LESS_OR_EQUAL = 14, NOT_EQUAL = 15, LESS = 16, 
    GREATER_OR_EQUAL = 17, GREATER = 18, MUL = 19, QUOTIENT = 20, MODULO = 21, 
    QUESTION = 22, AMPERSAND = 23, PREPROC_DELETE = 24, PREPROC_INSERT = 25, 
    PREPROC_ENDINSERT = 26, HASH = 27, BAR = 28, TILDA = 29, TRUE = 30, 
    FALSE = 31, UNDEFINED = 32, IS_NULL = 33, DECIMAL = 34, DATETIME = 35, 
    FLOAT = 36, STRING = 37, STRINGSTART = 38, STRINGTAIL = 39, STRINGPART = 40, 
    PROCEDURE_KEYWORD = 41, FUNCTION_KEYWORD = 42, ENDPROCEDURE_KEYWORD = 43, 
    ENDFUNCTION_KEYWORD = 44, EXPORT_KEYWORD = 45, VAL_KEYWORD = 46, ENDIF_KEYWORD = 47, 
    ENDDO_KEYWORD = 48, IF_KEYWORD = 49, ELSIF_KEYWORD = 50, ELSE_KEYWORD = 51, 
    THEN_KEYWORD = 52, WHILE_KEYWORD = 53, DO_KEYWORD = 54, FOR_KEYWORD = 55, 
    TO_KEYWORD = 56, EACH_KEYWORD = 57, IN_KEYWORD = 58, TRY_KEYWORD = 59, 
    EXCEPT_KEYWORD = 60, ENDTRY_KEYWORD = 61, RETURN_KEYWORD = 62, CONTINUE_KEYWORD = 63, 
    RAISE_KEYWORD = 64, VAR_KEYWORD = 65, NOT_KEYWORD = 66, OR_KEYWORD = 67, 
    AND_KEYWORD = 68, NEW_KEYWORD = 69, GOTO_KEYWORD = 70, BREAK_KEYWORD = 71, 
    EXECUTE_KEYWORD = 72, ADDHANDLER_KEYWORD = 73, REMOVEHANDLER_KEYWORD = 74, 
    ASYNC_KEYWORD = 75, IDENTIFIER = 76, UNKNOWN = 77, PREPROC_EXCLAMATION_MARK = 78, 
    PREPROC_LPAREN = 79, PREPROC_RPAREN = 80, PREPROC_STRING = 81, PREPROC_USE_KEYWORD = 82, 
    PREPROC_REGION = 83, PREPROC_END_REGION = 84, PREPROC_NOT_KEYWORD = 85, 
    PREPROC_OR_KEYWORD = 86, PREPROC_AND_KEYWORD = 87, PREPROC_IF_KEYWORD = 88, 
    PREPROC_THEN_KEYWORD = 89, PREPROC_ELSIF_KEYWORD = 90, PREPROC_ENDIF_KEYWORD = 91, 
    PREPROC_ELSE_KEYWORD = 92, PREPROC_MOBILEAPPCLIENT_SYMBOL = 93, PREPROC_MOBILEAPPSERVER_SYMBOL = 94, 
    PREPROC_MOBILECLIENT_SYMBOL = 95, PREPROC_THICKCLIENTORDINARYAPPLICATION_SYMBOL = 96, 
    PREPROC_THICKCLIENTMANAGEDAPPLICATION_SYMBOL = 97, PREPROC_EXTERNALCONNECTION_SYMBOL = 98, 
    PREPROC_THINCLIENT_SYMBOL = 99, PREPROC_WEBCLIENT_SYMBOL = 100, PREPROC_ATCLIENT_SYMBOL = 101, 
    PREPROC_CLIENT_SYMBOL = 102, PREPROC_ATSERVER_SYMBOL = 103, PREPROC_SERVER_SYMBOL = 104, 
    PREPROC_MOBILE_STANDALONE_SERVER = 105, PREPROC_LINUX = 106, PREPROC_WINDOWS = 107, 
    PREPROC_MACOS = 108, PREPROC_IDENTIFIER = 109, PREPROC_NEWLINE = 110, 
    PREPROC_ANY = 111, ANNOTATION_ATSERVERNOCONTEXT_SYMBOL = 112, ANNOTATION_ATCLIENTATSERVERNOCONTEXT_SYMBOL = 113, 
    ANNOTATION_ATCLIENTATSERVER_SYMBOL = 114, ANNOTATION_ATCLIENT_SYMBOL = 115, 
    ANNOTATION_ATSERVER_SYMBOL = 116, ANNOTATION_BEFORE_SYMBOL = 117, ANNOTATION_AFTER_SYMBOL = 118, 
    ANNOTATION_AROUND_SYMBOL = 119, ANNOTATION_CHANGEANDVALIDATE_SYMBOL = 120, 
    ANNOTATION_CUSTOM_SYMBOL = 121, ANNOTATION_UNKNOWN = 122, PREPROC_ENDDELETE = 123, 
    PREPROC_DELETE_ANY = 124, AWAIT_KEYWORD = 125
  };

  enum {
    PREPROC_DELETE_CHANNEL = 2
  };

  enum {
    PREPROCESSOR_MODE = 1, ANNOTATION_MODE = 2, LABEL_MODE = 3, REGION_MODE = 4, 
    USE_MODE = 5, DOT_MODE = 6, PREPROC_DELETE_MODE = 7, ASYNC_MODE = 8
  };

  explicit BSLLexer(antlr4::CharStream *input);

  ~BSLLexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  // By default the static state used to implement the lexer is lazily initialized during the first
  // call to the constructor. You can call this function if you wish to initialize the static state
  // ahead of time.
  static void initialize();

private:

  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

};

